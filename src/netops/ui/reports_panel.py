import wx
import wx.dataview as dv
import time, os, pathlib
from ..utils.auto_dv import AutoSizeDVColsMixin

REPORTS_DIR = pathlib.Path(os.getcwd()) / "reports"
REPORTS_DIR.mkdir(exist_ok=True)

TEMPLATE = """# {title}

Generated: {ts}

## Summary
{summary}

---
*Generated by NetOps Workbench*
"""

class ReportWindow(wx.Frame):
    def __init__(self, parent, title, content):
        super().__init__(parent, title=title, size=(900, 700))
        panel = wx.Panel(self)
        s = wx.BoxSizer(wx.VERTICAL)
        txt = wx.TextCtrl(panel, value=content, style=wx.TE_MULTILINE | wx.TE_READONLY)
        s.Add(txt, 1, wx.EXPAND | wx.ALL, 8)
        panel.SetSizer(s)

class ReportsPanel(wx.Panel, AutoSizeDVColsMixin):
    def __init__(self, parent):
        super().__init__(parent)
        self._build()
        self.refresh()

    def _build(self):
        root = wx.BoxSizer(wx.VERTICAL)

        bar = wx.BoxSizer(wx.HORIZONTAL)
        self.btn_new = wx.Button(self, label="New Report")
        self.btn_del = wx.Button(self, label="Delete")
        self.btn_open = wx.Button(self, label="Open in Window")
        bar.Add(self.btn_new, 0, wx.RIGHT, 8)
        bar.Add(self.btn_del, 0, wx.RIGHT, 8)
        bar.Add(self.btn_open, 0)
        root.Add(bar, 0, wx.ALL, 12)

        # Split list + preview
        hs = wx.BoxSizer(wx.HORIZONTAL)
        self.dv = dv.DataViewListCtrl(self, style=dv.DV_ROW_LINES | dv.DV_VERT_RULES)
        for col in ["Name", "Created", "Path"]:
            self.dv.AppendTextColumn(col, width=200 if col != "Path" else 400)
        hs.Add(self.dv, 1, wx.ALL | wx.EXPAND, 8)
        self._bind_autosize(self.dv)

        self.preview = wx.TextCtrl(self, style=wx.TE_MULTILINE | wx.TE_READONLY)
        hs.Add(self.preview, 1, wx.ALL | wx.EXPAND, 8)
        root.Add(hs, 1, wx.LEFT | wx.RIGHT | wx.BOTTOM | wx.EXPAND, 8)

        self.SetSizer(root)

        # Events
        self.btn_new.Bind(wx.EVT_BUTTON, self.on_new)
        self.btn_del.Bind(wx.EVT_BUTTON, self.on_del)
        self.btn_open.Bind(wx.EVT_BUTTON, self.on_open)
        self.dv.Bind(dv.EVT_DATAVIEW_SELECTION_CHANGED, self.on_select)
        self.dv.Bind(dv.EVT_DATAVIEW_ITEM_ACTIVATED, self.on_activate)

    def refresh(self):
        self.dv.DeleteAllItems()
        for p in sorted(REPORTS_DIR.glob("*.md")):
            ts = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(p.stat().st_mtime))
            self.dv.AppendItem([p.stem, ts, str(p)])

    def on_new(self, evt):
        with wx.TextEntryDialog(self, "Report title:", "New Report", "Network Summary") as d:
            if d.ShowModal() != wx.ID_OK:
                return
            title = d.GetValue().strip() or "Network Report"
        # Ask for sections (simple checklist)
        choices = ["Subnet/VLSM Summary", "Scanner Summary", "Firewall Summary", "DNS Summary"]
        with wx.MultiChoiceDialog(self, "Select sections to include", "Report Sections", choices) as d2:
            if d2.ShowModal() != wx.ID_OK:
                return
            picked = [choices[i] for i in d2.GetSelections()]
        summary = "\\n".join([f"- {c}" for c in picked]) or "No sections selected."
        md = TEMPLATE.format(title=title, ts=time.strftime("%Y-%m-%d %H:%M:%S"), summary=summary)
        path = REPORTS_DIR / (title.replace(" ", "_") + ".md")
        path.write_text(md, encoding="utf-8")
        self.refresh()
        self.preview.SetValue(md)

    def on_del(self, evt):
        row = self.dv.GetSelectedRow()
        if row == wx.NOT_FOUND:
            return
        path = self.dv.GetTextValue(row, 2)
        try:
            pathlib.Path(path).unlink(missing_ok=True)
        except Exception as e:
            wx.MessageBox(f"Failed to delete: {e}", "Error", wx.OK | wx.ICON_ERROR)
        self.refresh()
        self.preview.SetValue("")

    def on_open(self, evt):
        row = self.dv.GetSelectedRow()
        if row == wx.NOT_FOUND:
            return
        name = self.dv.GetTextValue(row, 0)
        path = self.dv.GetTextValue(row, 2)
        content = pathlib.Path(path).read_text(encoding="utf-8")
        ReportWindow(self, name, content).Show()

    def on_select(self, evt):
        row = self.dv.GetSelectedRow()
        if row == wx.NOT_FOUND:
            return
        path = self.dv.GetTextValue(row, 2)
        try:
            self.preview.SetValue(pathlib.Path(path).read_text(encoding="utf-8"))
        except Exception as e:
            self.preview.SetValue(f"Failed to load preview: {e}")

    def on_activate(self, evt):
        self.on_open(evt)
